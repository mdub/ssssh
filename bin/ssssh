#! /usr/bin/env ruby

require "aws-sdk-core"
require "base64"
require "clamp"
require "logger"
require "multi_json"
require "net/http"
require "ssssh/version"

Clamp do

  option ["-C", "--context"], "KEY=VALUE",
         "add to encryption context\n  (may be specified multiple times)",
         :multivalued => true

  option ["--region"], "REGION", "AWS region",
         :environment_variable => "AWS_REGION", :required => true
  option "--access-key", "KEY", "AWS access key",
         :environment_variable => "AWS_ACCESS_KEY_ID",
         :attribute_name => :access_key_id
  option "--secret-key", "KEY", "AWS secret key",
         :environment_variable => "AWS_SECRET_ACCESS_KEY",
         :attribute_name => :secret_access_key
  option "--session-token", "KEY", "AWS security token",
         :environment_variable => "AWS_SECURITY_TOKEN",
         :attribute_name => :session_token

  option "--debug", :flag, "enable debugging"

  option "--version", :flag, "display version" do
    puts "ssssh-#{Ssssh::VERSION}"
    exit 0
  end

  subcommand "encrypt", "Encrypt" do

    option "--[no-]wrap", :flag, "wrap encrypted data", :default => true

    parameter "KEY_ID", "KMS key or alias"
    parameter "[PLAINTEXT]", "plaintext", :default => "STDIN"

    def execute
      result = encrypt(plaintext, key_id)
      result.delete!("\n") unless wrap?
      puts result
    end

    private

    def default_plaintext
      $stdin.read
    end

  end

  subcommand "decrypt", "Decrypt" do

    parameter "[CIPHERTEXT]", "encoded ciphertext", :default => "STDIN"

    def execute
      return if ciphertext.empty?
      puts decrypt(ciphertext)
    end

    private

    def default_ciphertext
      $stdin.read
    end

  end

  subcommand "exec", "Execute a command" do

    option "--prefix", "PREFIX", "environment variable prefix",
           :default => "KMS_ENCRYPTED_"

    parameter "COMMAND ...", "command to execute", :attribute_name => :command

    def execute
      exec(decrypted_env, *command)
    end

    private

    def decrypted_env
      {}.tap do |result|
        ENV.each do |name, ciphertext|
          next unless name.start_with?(prefix)
          begin
            plaintext_name = name[prefix.length .. -1]
            plaintext = decrypt(ciphertext)
            result[plaintext_name] = plaintext
          rescue Aws::KMS::Errors::InvalidCiphertextException => e
            signal_error("cannot decrypt $#{name}; invalid ciphertext", :status => 1)
          end
        end
      end
    end

  end

  def run(*args)
    super(*args)
  rescue Aws::Errors::MissingCredentialsError
    signal_error "no credentials provided"
  rescue Aws::KMS::Errors::InvalidCiphertextException
    signal_error(e.message, :status => 1)
  rescue Aws::KMS::Errors::ServiceError => e
    signal_error(e.message, :status => 9)
  end

  protected

  def default_region
    ENV["AWS_REGION"] || ENV["AWS_DEFAULT_REGION"] || ec2_instance_metadata["region"]
  end

  def logger
    @logger ||= ::Logger.new($stderr).tap do |logger|
      logger.level = (debug? ? ::Logger::DEBUG : ::Logger::INFO)
    end
  end

  def aws_config
    {
      :access_key_id => access_key_id,
      :secret_access_key => secret_access_key,
      :session_token => session_token,
      :region => region,
      :logger => logger, :log_level => :debug
    }.reject { |_k, v| v.nil? || v == "" }
  end

  def ec2_instance_metadata
    uri = URI("http://169.254.169.254/latest/dynamic/instance-identity/document")
    http = Net::HTTP.new(uri.host, uri.port)
    http.open_timeout = 1
    document = http.start do
      http.request_get(uri.path).body
    end
    MultiJson.load(document)
  rescue Net::OpenTimeout
    {}
  end

  def with_kms
    yield Aws::KMS::Client.new(aws_config)
  end

  def encryption_context
    context[:encryption_context] ||= {}
  end

  def append_to_context_list(context_string)
    key, value = context_string.split("=")
    raise ArgumentError, "KEY=VALUE expected" if value.nil?
    encryption_context[key] = value
  end

  def encrypt(plaintext, key_id)
    with_kms do |kms|
      encryption_params = {
        :key_id => key_id,
        :plaintext => plaintext,
        :encryption_context => encryption_context
      }
      Base64.encode64(kms.encrypt(encryption_params).ciphertext_blob)
    end
  end

  def decrypt(ciphertext)
    with_kms do |kms|
      decryption_params = {
        :ciphertext_blob => Base64.decode64(ciphertext),
        :encryption_context => encryption_context
      }
      kms.decrypt(decryption_params).plaintext
    end
  end

end
